- name: Deploy Web Application
  hosts: webserver
  become: yes
  gather_facts: yes
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
        # env varibales
    - name: "Load environment variables #DEV714#"
      shell: |
        source /etc/environment
        echo "$mlangles_mlops_dev_url_https|$domain"
      register: env_vars
      changed_when: false
    - name: Read release_version from file
      slurp:
        src: /home/ubuntu/release_version.txt
      register: release_version_raw

    - name: Set fact with decoded release_version
      set_fact:
        release_version: "{{ release_version_raw.content | b64decode | trim }}"
    - name: Extract values
      set_fact:
        mlangles_mlops_dev_url_https: "{{ env_vars.stdout.split('|')[0] }}"
        domain: "{{ env_vars.stdout.split('|')[1] }}"
    - name: Ensure /mnt/user-data directory exists
      file:
        path: "/mnt/user-data"
        state: directory
        mode: '0755'
    # Clean existing directoryexport PATH=/usr/local/go/bin:$PATH CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o code-gen
    - name: "Ensure mlops-Experiment-Model-Deployment directory is clean #DEV701#"
      file:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment"
        state: absent
    # Fetch AWS Secrets
    - name: Fetch AWS secrets
      shell: >
        aws secretsmanager get-secret-value --secret-id webapp-secrets --query SecretString --output text --region us-east-1
      register: secrets_output
    - name: Parse secrets JSON
      set_fact:
        secrets: "{{ secrets_output.stdout | default('{}') | from_json }}"
    # Get artifact 
    - name: "Download artifact from S3"
      shell: |
        aws s3 cp s3://github-artifacts-ca/mlops/{{ release_version }}/mlops-Experiment-Model-Deployment/mlops-Experiment-Model-Deployment.zip /mnt/user-data/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    
    - name: Unzip the artifact using sudo
      become: true  # Use sudo to unzip the file
      shell: |
        sudo unzip /mnt/user-data/mlops-Experiment-Model-Deployment.zip -d /mnt/user-data/mlops-Experiment-Model-Deployment/
      register: unzip_result
      changed_when: unzip_result.rc != 0
    - name: Remove the ZIP file after extraction
      become: true
      file:
        path: /mnt/user-data/mlops-Experiment-Model-Deployment.zip
        state: absent
    # Get AWS Metadata Token
    - name: Get AWS metadata token
      shell: |
        curl -s -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" http://169.254.169.254/latest/api/token
      register: metadata_token
      changed_when: false
    # Get Public IP from AWS Metadata
    - name: Set public IP using metadata token
      shell: |
        curl -s -H "X-aws-ec2-metadata-token: {{ metadata_token.stdout }}" http://169.254.169.254/latest/meta-data/public-ipv4
      register: public_ip_result
      changed_when: false
    # Get Private IP from AWS Metadata
    - name: Set private IP using metadata token
      shell: |
        curl -s -H "X-aws-ec2-metadata-token: {{ metadata_token.stdout }}" http://169.254.169.254/latest/meta-data/local-ipv4
      register: private_ip_result
      changed_when: false
    # Set Public and Private IPs as Facts
    - name: Set public and private IPs
      set_fact:
        public_ip: "{{ public_ip_result.stdout }}"
        private_ip: "{{ private_ip_result.stdout }}"
    - name: Update MLflow command with private IP in docker-compose.yaml
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/docker-compose.yaml"
        regexp: "^\\s*command: mlflow server --backend-store-uri.*"
        line: "      command: mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@{{ private_ip }}:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0"
        backrefs: yes
    - name: Update all MinIO alias commands in docker-compose.yaml with domain
      replace:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/docker-compose.yaml"
        regexp: "/usr/bin/mc alias set minio https://.*:9000 \\$\\{AWS_ACCESS_KEY_ID\\} \\$\\{AWS_SECRET_ACCESS_KEY\\} &&"
        replace: "/usr/bin/mc alias set minio https://{{ domain }}:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&"

    # Update mlflow_ip in backend/output.yaml with public IP  
    - name: Update mlflow_ip with public IP
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/output.yaml"
        regexp: "^mlflow_ip:.*"
        line: "mlflow_ip: {{ public_ip }}"
        create: yes
    # Update MLFLOW_HOST in config.py with public IP
    - name: Update MLFLOW_HOST in config.py with public IP
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: "^MLFLOW_HOST =.*"
        line: "MLFLOW_HOST = \"http://{{ public_ip }}\""
        create: yes
    - name: Update AIRFLOW_HOST in config.py with public IP
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: "^AIRFLOW_HOST =.*"
        line: "AIRFLOW_HOST = \"http://{{ public_ip }}\""
        create: yes
    - name: Update MLFLOW_HOST in config.py with public IP
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: "^HOST =.*"
        line: "HOST = \"{{ private_ip }}\""
        create: yes
    # Update AWS Secrets in .env and output.yaml
    - name: Update .env file with AWS credentials
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/.env"
        regexp: "^AWS_ACCESS_KEY_ID="
        line: "AWS_ACCESS_KEY_ID={{ secrets.AWS_ACCESS_KEY_MLOPS_ID }}"
        create: yes
    - name: Update AWS Secret Access Key in .env
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/.env"
        regexp: "^AWS_SECRET_ACCESS_KEY="
        line: "AWS_SECRET_ACCESS_KEY={{ secrets.AWS_SECRET_ACCESS_KEY_MLOPS }}"
        create: yes
    - name: Update backend/output.yaml with AWS keys
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/output.yaml"
        regexp: "^aws_access_key_id:"
        line: "aws_access_key_id: {{ secrets.AWS_ACCESS_KEY_MLOPS_ID }}"
        create: yes
    - name: Update AWS Secret Access Key in output.yaml
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/output.yaml"
        regexp: "^aws_secret_access_key:"
        line: "aws_secret_access_key: {{ secrets.AWS_SECRET_ACCESS_KEY_MLOPS }}"
        create: yes
    - name: Update Bucket Name in config.py
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: "^BUCKET = "
        line: "BUCKET = \"{{ secrets.BUCKET_MLOPS }}\""
        create: yes
    - name: Update subnet_id in output.yaml
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/output.yaml"
        regexp: "^subnet_id:"
        line: "subnet_id: {{ secrets.DEFAULT_SUBNET_MLOPS_ID }}"
        create: yes
    - name: Update VPC in config.py
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: "^VPC ="
        line: "VPC = \"{{ secrets.DEFAULT_VPC_MLOPS_ID }}\""
        create: yes
    - name: Update control_plane_url in output.yaml
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/output.yaml"
        regexp: "^control_plane_url:"
        line: "control_plane_url: {{ mlangles_mlops_dev_url_https }}"
        create: yes
    - name: Update control_plane_url in output.yaml
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/output.yaml"
        regexp: "^mlflow_s3_endpoint_url:"
        line: "mlflow_s3_endpoint_url: {{ mlangles_mlops_dev_url_https }}:9000"
        create: yes
    - name: Update MLFLOW_S3_ENDPOINT_URL in docker-compose.yaml with MLANGLES_MLOPS_DEV_URL_HTTPS
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/docker-compose.yaml"
        regexp: "^\\s*- MLFLOW_S3_ENDPOINT_URL=.*"
        line: "      - MLFLOW_S3_ENDPOINT_URL={{ mlangles_mlops_dev_url_https }}:9000"
        backrefs: yes

    - name: Update control_plane_url in config.py
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: '^control_plane_url =.*'
        line: 'control_plane_url = "{{ mlangles_mlops_dev_url_https }}"'
        create: yes
    - name: Update MICROSERVICE_HOST in config.py
      lineinfile:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/backend/config.py"
        regexp: '^MICROSERVICE_HOST =.*'
        line: 'MICROSERVICE_HOST = "{{ mlangles_mlops_dev_url_https }}"'
        create: yes
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops-Experiment-Model-Deployment/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Authenticate Docker with AWS ECR
      shell: |
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 807923266708.dkr.ecr.us-east-1.amazonaws.com
      register: ecr_login
      changed_when: "'Login Succeeded' in ecr_login.stdout"

    - name: Run all docker-compose commands in one task
      shell: |
        sudo docker compose -f /mnt/user-data/mlops-Experiment-Model-Deployment/docker-compose.yaml up -d --build
        sudo docker compose -f /mnt/user-data/mlops-Experiment-Model-Deployment/docker-compose.yaml up -d mc_update
        sudo docker compose -f /mnt/user-data/mlops-Experiment-Model-Deployment/airflow/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops-Experiment-Model-Deployment
      register: docker_output
      changed_when: docker_output.rc != 0
    # cloning the mlops_Code_Generation
    - name: "Clean old directory before fetching artifacts"
      file:
        path: "/mnt/user-data/mlops_Code_Generation"
        state: absent
    
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops_Code_Generation/ /mnt/user-data/mlops_Code_Generation/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make code-gen executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops_Code_Generation/code-gen"
        mode: '0755'
    - name: Update ip in config/config.yaml with MLANGLES_MLOPS_DEV_URL_HTTPS
      lineinfile:
        path: /mnt/user-data/mlops_Code_Generation/config/config.yaml
        regexp: '^\s*ip:.*'
        line: '  ip: "{{ lookup("env", "mlangles_mlops_dev_url_https") }}"'
        backrefs: yes
    - name: Update pipeline ip in config/config.yaml with MLANGLES_MLOPS_DEV_URL_HTTPS
      lineinfile:
        path: /mnt/user-data/mlops_Code_Generation/config/config.yaml
        regexp: '^\s*pipeline:\s*\n\s*ip:.*'
        line: '  ip: "{{ lookup("env", "mlangles_mlops_dev_url_https") }}"'
        backrefs: yes
    - name: Update vector_db ip in config/config.yaml with MLANGLES_MLOPS_DEV_URL_HTTPS
      lineinfile:
        path: /mnt/user-data/mlops_Code_Generation/config/config.yaml
        regexp: '^\s*vector_db:\s*\n\s*ip:.*'
        line: '  ip: "{{ lookup("env", "mlangles_mlops_dev_url_https") }}"'
        backrefs: yes
    
    - name: Update pipeline ip in config/config.yaml with MLANGLES_MLOPS_DEV_URL_HTTPS
      lineinfile:
        path: /mnt/user-data/mlops_Code_Generation/config/config.yaml
        regexp: '^\s*pipeline:\s*\n\s*ip:.*'
        line: '  ip: "{{ lookup("env", "mlangles_mlops_dev_url_https") }}"'
        backrefs: yes
    - name: Read myserver1 private IP from file
      slurp:
        src: /tmp/mlops-terra-dev-gpu-private-ip.txt
      register: myserver1_ip_raw
    
    - name: Extract myserver1 IP address
      set_fact:
        myserver1_ip: "{{ myserver1_ip_raw.content | b64decode | trim | regex_findall('(?:[0-9]{1,3}\\.){3}[0-9]{1,3}') | first }}"
    
    - name: Update deepseek_llm ip and port in config.yaml
      replace:
        path: /mnt/user-data/mlops_Code_Generation/config/config.yaml
        regexp: '^\s*deepseek_llm:\s*\n\s*ip:.*\n\s*port:.*'
        replace: |
          deepseek_llm:
            ip: "http://{{ myserver1_ip }}"
            port: "7000"
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops_Code_Generation/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"

    # 🐳 Run docker-compose up -d --build
    - name: Run docker-compose up -d --build
      command: |
        sudo docker compose -f /mnt/user-data/mlops_Code_Generation/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops_Code_Generation
      register: docker_output
      changed_when: docker_output.rc != 0
    # Clone the mlops_GitHub_Actions
    - name: "Ensure mlops_GitHub_Actions directory is clean #DEV709#"
      file:
        path: "/mnt/user-data/mlops_GitHub_Actions"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops_GitHub_Actions/ /mnt/user-data/mlops_GitHub_Actions/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make github-actions executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops_GitHub_Actions/github-actions"
        mode: '0755'
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops_GitHub_Actions/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlops_GitHub_Actions
      shell: |
        sudo docker compose -f /mnt/user-data/mlops_GitHub_Actions/docker-compose.yaml down
        sudo docker compose -f /mnt/user-data/mlops_GitHub_Actions/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops_GitHub_Actions
      register: docker_output
      changed_when: docker_output.rc != 0
    # clone the mlops_Pipeline_Execution
    - name: "Ensure mlops_Pipeline_Execution directory is clean #DEV712#"
      file:
        path: "/mnt/user-data/mlops_Pipeline_Execution"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops_Pipeline_Execution/ /mnt/user-data/mlops_Pipeline_Execution/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make pipeline exec as executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops_Pipeline_Execution/pipeline-exec"
        mode: '0755'
    - name: Update .env file with AWS credentials
      lineinfile:
        path: "/mnt/user-data/mlops_Pipeline_Execution/controllers/.env"
        regexp: "^AWS_ACCESS_KEY_ID="
        line: "AWS_ACCESS_KEY_ID={{ secrets.AWS_ACCESS_KEY_MLOPS_ID }}"
        create: yes
    - name: Update AWS Secret Access Key in .env
      lineinfile:
        path: "/mnt/user-data/mlops_Pipeline_Execution/controllers/.env"
        regexp: "^AWS_SECRET_ACCESS_KEY="
        line: "AWS_SECRET_ACCESS_KEY={{ secrets.AWS_SECRET_ACCESS_KEY_MLOPS }}"
        create: yes
    - name: Update backend/output.yaml with AWS keys
      lineinfile:
        path: "/mnt/user-data/mlops_Pipeline_Execution/Terraform/terraform.tfvars"
        regexp: "^aws_access_key_id ="
        line: "aws_access_key_id = {{ secrets.AWS_ACCESS_KEY_MLOPS_ID }}"
        create: yes
    - name: Update AWS Secret Access Key in output.yaml
      lineinfile:
        path: "/mnt/user-data/mlops_Pipeline_Execution/Terraform/terraform.tfvars"
        regexp: "^aws_secret_access_key = "
        line: "aws_secret_access_key = {{ secrets.AWS_SECRET_ACCESS_KEY_MLOPS }}"
        create: yes
    - name: Set public and private IPs
      set_fact:
        public_ip: "{{ public_ip_result.stdout }}"
        private_ip: "{{ private_ip_result.stdout }}"
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/mlops_Pipeline_Execution/configs/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'

    - name: Update pipeline URL in config.yaml
      replace:
        path: "/mnt/user-data/mlops_Pipeline_Execution/configs/config.yaml"
        regexp: '^(\s*url:\s*").*?(")$'
        replace: '\1{{ lookup("env", "mlangles_mlops_dev_url_https") }}\2'
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops_Pipeline_Execution/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for pipeline_execution
      shell: |
        sudo docker compose -f /mnt/user-data/mlops_Pipeline_Execution/docker-compose.yaml down
        sudo docker compose -f /mnt/user-data/mlops_Pipeline_Execution/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops_Pipeline_Execution
      register: docker_output
      changed_when: docker_output.rc != 0 
    # Clone the mlops_Pipeline
    - name: "Ensure mlops_Pipeline directory is clean #DEV710#"
      file:
        path: "/mnt/user-data/mlops_Pipeline"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops_Pipeline/ /mnt/user-data/mlops_Pipeline/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make pipeline executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops_Pipeline/pipeline"
        mode: '0755'
    - name: Update pipeline URL in config.yaml
      replace:
        path: "/mnt/user-data/mlops_Pipeline/configs/config.yaml"
        regexp: '^(\s*url:\s*").*?(")$'
        replace: '\1{{ lookup("env", "mlangles_mlops_dev_url_https") }}\2'
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/mlops_Pipeline/configs/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops_Pipeline/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlops_Pipeline
      shell: |
        sudo docker compose -f /mnt/user-data/mlops_Pipeline/docker-compose.yaml down
        sudo docker compose -f /mnt/user-data/mlops_Pipeline/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops_Pipeline
      register: docker_output
      changed_when: docker_output.rc != 0
  # clone the mlangles_Vector_logging
    - name: "Ensure mlangles_Vector_logging directory is clean #DEV711#"
      file:
        path: "/mnt/user-data/mlangles_Vector_logging"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 cp s3://github-artifacts-ca/mlops/{{ release_version }}/mlangles_Vector_logging/mlangles_Vector_logging-v1.0.zip /mnt/user-data/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: Unzip the artifact using sudo
      become: true  # Use sudo to unzip the file
      shell: |
        sudo unzip /mnt/user-data/mlangles_Vector_logging-v1.0.zip -d /mnt/user-data/mlangles_Vector_logging/
      register: unzip_result
      changed_when: unzip_result.rc != 0
    - name: Remove the ZIP file after extraction
      become: true
      file:
        path: /mnt/user-data/mlangles_Vector_logging-v1.0.zip
        state: absent
    - name: "Find all files in mlangles_Vector_logging"
      find:
        paths: /mnt/user-data/mlangles_Vector_logging
        file_type: file
      register: found_files

    - name: "Make all files in mlangles_Vector_logging executable (as ubuntu)"
      file:
        path: "{{ item.path }}"
        mode: '0755'
      loop: "{{ found_files.files }}"
    - name: Update .env file with AWS credentials
      lineinfile:
        path: "/mnt/user-data/mlangles_Vector_logging/.env"
        regexp: "^AWS_ACCESS_KEY_ID="
        line: "AWS_ACCESS_KEY_ID={{ secrets.AWS_ACCESS_KEY_MLOPS_ID }}"
        create: yes
    - name: Update AWS Secret Access Key in .env
      lineinfile:
        path: "/mnt/user-data/mlangles_Vector_logging/.env"
        regexp: "^AWS_SECRET_ACCESS_KEY="
        line: "AWS_SECRET_ACCESS_KEY={{ secrets.AWS_SECRET_ACCESS_KEY_MLOPS }}"
        create: yes
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlangles_Vector_logging/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlangles_Vector_logging
      shell: |
        sudo docker compose -f /mnt/user-data/mlangles_Vector_logging/docker-compose.yaml down
        sudo docker compose -f /mnt/user-data/mlangles_Vector_logging/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlangles_Vector_logging
      register: docker_output
      changed_when: docker_output.rc != 0
    # clone the mlangles_Vector_db
    - name: "Ensure mlangles_Vector_db directory is clean #DEV706#"
      file:
        path: "/mnt/user-data/mlangles_Vector_db"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 cp s3://github-artifacts-ca/mlops/{{ release_version }}/mlangles_Vector_db/mlangles_Vector_db-v1.0.zip /mnt/user-data/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: Unzip the artifact using sudo
      become: true  # Use sudo to unzip the file
      shell: |
        sudo unzip /mnt/user-data/mlangles_Vector_db-v1.0.zip -d /mnt/user-data/mlangles_Vector_db/
      register: unzip_result
      changed_when: unzip_result.rc != 0
    - name: Remove the ZIP file after extraction
      become: true
      file:
        path: /mnt/user-data/mlangles_Vector_db-v1.0.zip
        state: absent
    - name: "Find all files in mlangles_Vector_logging"
      find:
        paths: "/mnt/user-data/mlangles_Vector_logging"
        file_type: file
      register: vector_logging_files

    - name: "Make mlangles_Vector_logging files executable (as ubuntu)"
      file:
        path: "{{ item.path }}"
        mode: '0755'
      loop: "{{ vector_logging_files.files }}"
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlangles_Vector_db/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlangles_db
      shell: |
        sudo docker compose -f /mnt/user-data/mlangles_Vector_db/docker-compose.yaml down
        sudo docker compose -f /mnt/user-data/mlangles_Vector_db/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlangles_Vector_db
      register: docker_output
      changed_when: docker_output.rc != 0
    
    
    # clone the mlops-Access-Roles
    - name: "Ensure mlops-Access-Roles directory is clean #DEV704#"
      file:
        path: "/mnt/user-data/mlops-Access-Roles"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops-Access-Roles/ /mnt/user-data/mlops-Access-Roles/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make mlops access roles as executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops-Access-Roles/access-roles"
        mode: '0755'
    - name: Update pipeline URL in config.yaml
      replace:
        path: "/mnt/user-data/mlops-Access-Roles/configs/config.yaml"
        regexp: '^(\s*url:\s*").*?(")$'
        replace: '\1{{ lookup("env", "mlangles_mlops_dev_url_https") }}\2'
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/mlops-Access-Roles/configs/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops-Access-Roles/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlops-Access-Roles
      shell: |
        sudo docker compose -f /mnt/user-data/mlops-Access-Roles/docker-compose.yaml down
        sudo docker compose -f /mnt/user-data/mlops-Access-Roles/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops-Access-Roles
      register: docker_output
      changed_when: docker_output.rc != 0
    # clone the mlops_Projects
    - name: "Ensure mlops_Projects directory is clean #DEV705#"
      file:
        path: "/mnt/user-data/mlops_Projects"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops_Projects/ /mnt/user-data/mlops_Projects/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make mlops projects as executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops_Projects/projects"
        mode: '0755'

    - name: Update project URL in config.yaml
      replace:
        path: "/mnt/user-data/mlops_Projects/configs/config.yaml"
        regexp: '^(\s*url:\s*").*?(")$'
        replace: '\1{{ lookup("env", "mlangles_mlops_dev_url_https") }}\2'
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/mlops_Projects/configs/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'

    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/mlops_Projects/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlops_Projects
      shell: |
        sudo docker compose -f /mnt/user-data/mlops_Projects/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlops_Projects
      register: docker_output
      changed_when: docker_output.rc != 0
    # cloning mlops_monitoring
    - name: Ensure mlops_monitoring directory is clean
      file:
        path: "/mnt/user-data/mlops_monitoring"
        state: absent
    - name: "Download artifact from S3"
      shell: |
        aws s3 cp s3://github-artifacts-ca/mlops/Release-v1.0/mlops_monitoring/mlops_monitoring-v1.0.zip /mnt/user-data/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0

    - name: Unzip the artifact using sudo
      become: true
      shell: |
        sudo unzip /mnt/user-data/mlops_monitoring-v1.0.zip -d /mnt/user-data/mlops_monitoring/
      register: unzip_result
      changed_when: unzip_result.rc != 0

    - name: Remove the ZIP file after extraction
      become: true
      file:
        path: /mnt/user-data/mlops_monitoring-v1.0.zip
        state: absent
    - name: Replace Prometheus target IP
      replace:
        path: /mnt/user-data/mlops_monitoring/config/prometheus.yml
        regexp: "targets: \\['[0-9\\.]+:9090'\\]"
        replace: "targets: ['{{ public_ip }}:9090']"
    
    - name: Replace Evidently target IP
      replace:
        path: /mnt/user-data/mlops_monitoring/config/prometheus.yml
        regexp: "targets: \\['[0-9\\.]+:8085'\\]"
        replace: "targets: ['{{ public_ip }}:8085']"
    
    - name: Replace image_drift target IP
      replace:
        path: /mnt/user-data/mlops_monitoring/config/prometheus.yml
        regexp: "targets: \\['[0-9\\.]+:8100'\\]"
        replace: "targets: ['{{ public_ip }}:8100']"
    
    - name: Replace Node Exporter domain
      replace:
        path: /mnt/user-data/mlops_monitoring/config/prometheus.yml
        regexp: "targets:\\s+\\- '.*'"
        replace: "targets:\n      - '{{ domain }}'"   
    

    - name: Update only the Prometheus datasource URL with public_ip
      lineinfile:
        path: "/mnt/user-data/mlops_monitoring/config/grafana_datasources.yaml"
        regexp: '^\s*url:\s*http.*'
        line: "  url: http://{{ public_ip }}:9090"
        insertafter: '^\s*- type: prometheus'
    
    - name: Update domain in docker-compose.yml for certificate paths
      replace:
        path: "/mnt/user-data/mlops_monitoring/docker-compose.yml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Set permissions for mlops_monitoring
      file:
        path: "/mnt/user-data/mlops_monitoring"
        state: directory
        mode: "0777"
        recurse: yes
    
    - name: Install required system packages
      apt:
        name:
          - libgl1
          - python3.10-venv
        state: present
        update_cache: yes
    
    - name: Set up Python virtual environment
      command: python3.10 -m venv /mnt/user-data/mlops_monitoring/venv
      args:
        creates: /mnt/user-data/mlops_monitoring/venv
    
    - name: Activate virtual environment and install requirements
      shell: |
        source /mnt/user-data/mlops_monitoring/venv/bin/activate
        export TMPDIR=/mnt/user-data/mlops_monitoring/venv
        python3.10 -m pip install -r /mnt/user-data/mlops_monitoring/requirements.txt --prefix=/mnt/user-data/mlops_monitoring/venv --no-cache-dir
      args:
        executable: /bin/bash
    
    - name: Prepare airflow directory
      file:
        path: /opt/airflow
        state: directory
        mode: "0777"
    
    - name: Start Docker Compose services
      shell: |
        sudo docker compose -f /mnt/user-data/mlops_monitoring/docker-compose.yml up -d --build
      args:
        chdir: /mnt/user-data/mlops_monitoring
          
    # cloning Auth-Management_LLMOps repo 
    - name: "Ensure Auth-Management_LLMOps directory is clean #DEV701#"
      file:
        path: "/mnt/user-data/Auth-Management_LLMOps"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/Auth-Management_LLMOps/ /mnt/user-data/Auth-Management_LLMOps/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make authmanagement as executable (as ubuntu)"
      file:
        path: "/mnt/user-data/Auth-Management_LLMOps/authentication"
        mode: '0755'
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/Auth-Management_LLMOps/config/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'
    - name: Update domain in docker-compose.yaml for certificate paths
      replace:
        path: "/mnt/user-data/Auth-Management_LLMOps/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlops_Projects
      shell: |
        sudo docker compose -f /mnt/user-data/Auth-Management_LLMOps/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/Auth-Management_LLMOps
      register: docker_output
      changed_when: docker_output.rc != 0
    # cloning the User-Management_LLMOps
    - name: "Ensure mlops_Projects directory is clean #DEV702#"
      file:
        path: "/mnt/user-data/User-Management_LLMOps"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/User-Management_LLMOps/ /mnt/user-data/User-Management_LLMOps/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make User management as executable (as ubuntu)"
      file:
        path: "/mnt/user-data/User-Management_LLMOps/user-management"
        mode: '0755'
    - name: Update project URL in config.yaml
      replace:
        path: "/mnt/user-data/User-Management_LLMOps/config/config.yaml"
        regexp: '^(\s*url:\s*").*?(")$'
        replace: '\1{{ lookup("env", "mlangles_mlops_dev_url_https") }}\2'
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/User-Management_LLMOps/config/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'
    - name: Update domain in docker-compose.yml for certificate paths
      replace:
        path: "/mnt/user-data/User-Management_LLMOps/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
  
    - name: Restart Docker Compose with build for mlops_Projects
      shell: |
        sudo docker compose -f /mnt/user-data/User-Management_LLMOps/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/User-Management_LLMOps
      register: docker_output
      changed_when: docker_output.rc != 0
    # cloning mlangles_Secret_Management
    - name: "Ensure mlops_secret_management directory is clean #DEV703#"
      file:
        path: "/mnt/user-data/mlangles_Secret_Management"
        state: absent
    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlangles_Secret_Management/ /mnt/user-data/mlangles_Secret_Management/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0
    - name: "Make secrets management as executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlangles_Secret_Management/secret-management"
        mode: '0755'
    - name: Update .env file with AWS credentials
      lineinfile:
        path: "/mnt/user-data/mlangles_Secret_Management/.env"
        regexp: "^AWS_ACCESS_KEY_ID="
        line: "AWS_ACCESS_KEY_ID={{ secrets.AWS_ACCESS_KEY_MLOPS_ID }}"
        create: yes
    - name: Update AWS Secret Access Key in .env
      lineinfile:
        path: "/mnt/user-data/mlangles_Secret_Management/.env"
        regexp: "^AWS_SECRET_ACCESS_KEY="
        line: "AWS_SECRET_ACCESS_KEY={{ secrets.AWS_SECRET_ACCESS_KEY_MLOPS }}"
        create: yes
    - name: Update project URL in config.yaml
      replace:
        path: "/mnt/user-data/mlangles_Secret_Management/configs/config.yaml"
        regexp: '^(\s*url:\s*").*?(")$'
        replace: '\1{{ lookup("env", "mlangles_mlops_dev_url_https") }}\2'
    - name: Update database host with private IP in config.yaml
      lineinfile:
        path: "/mnt/user-data/mlangles_Secret_Management/configs/config.yaml"
        regexp: '^\s*host:\s*".*"$'
        line: '  host: "{{ private_ip }}"'
        insertafter: '^database:'
    - name: Update domain in docker-compose.yml for certificate paths
      replace:
        path: "/mnt/user-data/mlangles_Secret_Management/docker-compose.yaml"
        regexp: "/etc/letsencrypt/live/[^/]+/"
        replace: "/etc/letsencrypt/live/{{ domain }}/"
    - name: Restart Docker Compose with build for mlangles_Secret_Management
      shell: |
        sudo docker compose -f /mnt/user-data/mlangles_Secret_Management/docker-compose.yaml up -d --build
      args:
        chdir: /mnt/user-data/mlangles_Secret_Management
      register: docker_output
      changed_when: docker_output.rc != 0
    # Cloning Mlops Frontend Repo
    - name: "Ensure mlops-frontend directory is clean #DEV750#"
      file:
        path: "/mnt/user-data/mlops-frontend"
        state: absent

    - name: "Download artifacts from S3"
      shell: |
        aws s3 sync s3://github-artifacts-ca/mlops/{{ release_version }}/mlops-frontend/ /mnt/user-data/mlops-frontend/ --region us-east-1
      args:
        executable: /bin/bash
      register: download_result
      changed_when: download_result.rc != 0

    - name: "Ensure build directory exists"
      file:
        path: "/mnt/user-data/mlops-frontend/build"
        state: directory
        mode: '0755'

    - name: "Make all files in build executable (as ubuntu)"
      file:
        path: "/mnt/user-data/mlops-frontend/build"
        recurse: yes
        mode: '0755'

    # 📝 Load environment variables from /etc/environment
    - name: Load environment variables
      shell: source /etc/environment
      args:
        executable: /bin/bash

    - name: Change ownership to correct user
      ansible.builtin.command: chown -R ubuntu:ubuntu /mnt/user-data/mlops-frontend
      become: true

    # 🔥 Replace frontend/backend URLs using Ansible lineinfile
     
    - name: Set common variables for runtime config updates
      set_fact:
        base_url: "{{ lookup('env', 'mlangles_mlops_dev_url_https') }}"
        config_file: "/mnt/user-data/mlops-frontend/build/Config.js"
    - name: Replace backend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'backend_url:\s*".*?"'
        replace: 'backend_url: "{{ base_url }}"'
    - name: Replace frontend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'frontend_url:\s*".*?"'
        replace: 'frontend_url: "{{ base_url }}"'
    - name: Replace usermgmt_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'usermgmt_url:\s*".*?"'
        replace: 'usermgmt_url: "{{ base_url }}:9092"'
    - name: Replace pipeline_backend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'pipeline_backend_url:\s*".*?"'
        replace: 'pipeline_backend_url: "{{ base_url }}:8506"'
    - name: Replace access_roles_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'access_roles_url:\s*".*?"'
        replace: 'access_roles_url: "{{ base_url }}:8885"'
    - name: Replace projects_backend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'projects_backend_url:\s*".*?"'
        replace: 'projects_backend_url: "{{ base_url }}:8504"'
    - name: Replace pipeline_exec_backend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'pipeline_exec_backend_url:\s*".*?"'
        replace: 'pipeline_exec_backend_url: "{{ base_url }}:8087"'
    - name: Replace prompt_gen_backend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'prompt_gen_backend_url:\s*".*?"'
        replace: 'prompt_gen_backend_url: "{{ base_url }}:8086"'
    - name: Replace experiment_backend_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'experiment_backend_url:\s*".*?"'
        replace: 'experiment_backend_url: "{{ base_url }}:8000"'
    - name: Replace codegen_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'codegen_url:\s*".*?"'
        replace: 'codegen_url: "{{ base_url }}:8086"'
    - name: Replace login_url in runtime config
      replace:
        path: "{{ config_file }}"
        regexp: 'login_url:\s*".*?"'
        replace: 'login_url: "{{ base_url }}:8101"'
    - name: "Replace secrets_url in runtime config #TAG103#" 
      replace:
        path: "{{ config_file }}"
        regexp: 'secrets_url:\s*".*?"'
        replace: 'secrets_url: "{{ base_url }}:8880"'
 
 